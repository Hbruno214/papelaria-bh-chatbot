const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const winston = require('winston');
const express = require('express');
const qrcodeLib = require('qrcode');
const fs = require('fs');
const app = express();
const PORT = process.env.PORT || 3000;

// Configura√ß√£o do logger
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.json(),
    transports: [
        new winston.transports.File({ filename: 'error.log', level: 'error' }),
        new winston.transports.File({ filename: 'combined.log' }),
    ],
});

// Configura√ß√£o do diret√≥rio de uploads
const uploadDir = './uploads';
if (!fs.existsSync(uploadDir)){
    fs.mkdirSync(uploadDir);
}

// Cria um endpoint de escuta para evitar timeout
app.get('/', (req, res) => res.send('Bot is running'));
app.listen(PORT, () => console.log(`Server is running on port ${PORT}`));

// Configura o cliente do WhatsApp com a sess√£o
const client = new Client({
    authStrategy: new LocalAuth({ clientId: "bot-whatsapp", dataPath: process.env.SESSION_PATH }),
    puppeteer: {
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
    }
});

// Gera√ß√£o do QR Code
client.on('qr', async qr => {
    qrcode.generate(qr, { small: true });
    logger.info('QR code gerado.');
    try {
        await qrcodeLib.toFile('./qrcode.png', qr);
        console.log("QR Code saved as qrcode.png");
    } catch (err) {
        console.error(err);
    }
});

// Evento de sucesso ao conectar
client.on('ready', () => {
    console.log('‚úÖ Tudo certo! WhatsApp conectado.');
    logger.info('WhatsApp conectado com sucesso.');
});

// Inicializa o cliente
client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

// N√∫mero bloqueado
const telefoneBloqueado = '5582981452814@c.us';

client.on('message', async msg => {
    // Bloqueio preventivo para impedir qualquer resposta ao n√∫mero bloqueado
    if (msg.from === telefoneBloqueado) {
        logger.warn(`Mensagem recebida de n√∫mero bloqueado: ${msg.from} - Sem resposta enviada.`);
        return; // Impede qualquer resposta
    }

    try {
        // Ignora mensagens de grupos
        if (msg.from.endsWith('@g.us')) {
            logger.info(`Mensagem ignorada de grupo: ${msg.from}`);
            return;
        }

        const chat = await msg.getChat();
        const contact = await msg.getContact();
        const name = contact.pushname ? contact.pushname.split(" ")[0] : 'Cliente';

        // Mensagem de boas-vindas e op√ß√µes de servi√ßos
        if (msg.body.match(/(menu|oi|ol√°|ola|servi√ßos|materiais)/i) && msg.from.endsWith('@c.us')) {
            await delay(3000);
            await chat.sendStateTyping();
            await delay(3000);
            await client.sendMessage(msg.from, `Ol√°, *${name}*! Bem-vindo √† *Papelaria BH* Ô∏è. Aqui est√£o algumas op√ß√µes:\n\n1 - Impress√£o\n2 - Xerox\n3 - Revela√ß√£o de Foto\n4 - Foto 3x4\n5 - Plastifica√ß√£o A4\n6 - Plastifica√ß√£o SUS\n7 - Impress√£o em papel cart√£o\n8 - Papel fotogr√°fico adesivo\n9 - Encaderna√ß√£o 50 folhas\n10 - Mais op√ß√µes de materiais.\n\nDiga o n√∫mero da op√ß√£o ou envie seu arquivo.`);
            await delay(3000);
            await chat.sendStateTyping();
        } 
        // L√≥gica para resposta a arquivos
        else if (msg.hasMedia) {
            const media = await msg.downloadMedia();
            const filePath = `${uploadDir}/${msg.id.id}.${media.mimetype.split('/')[1]}`;
            fs.writeFileSync(filePath, media.data, { encoding: 'base64' });
            await client.sendMessage(msg.from, `üì• Recebemos seu arquivo com sucesso. Nome do arquivo: *${filePath}*. Processaremos seu pedido em breve. Seu arquivo estar√° pronto em 5 minutos para retirar na papelaria.\n\nObrigado! Voc√™ pode pagar via PIX (chave: 82987616759) ou na loja.`);
            logger.info(`Arquivo recebido de ${msg.from}: ${filePath}`);
            // Pergunta de feedback
            await delay(3000);
            await client.sendMessage(msg.from, `Gostar√≠amos de saber sua opini√£o! Voc√™ ficou satisfeito com o servi√ßo? Responda com "Sim" ou "N√£o".`);
        } 
        // L√≥gica para servi√ßos
        else if (msg.body >= '1' && msg.body <= '10') {
            // L√≥gica de resposta para cada op√ß√£o
            // [Conte√∫do aqui]
        } else {
            await client.sendMessage(msg.from, 'Desculpe, n√£o entendi. Por favor, envie um n√∫mero de op√ß√£o ou escreva "menu".');
        }

    } catch (error) {
        logger.error('Erro ao processar a mensagem: ', error);
    }
});

// L√≥gica para feedback do cliente
client.on('message', async msg => {
    const feedbackPrompt = ['sim', 'n√£o'];
    
    if (feedbackPrompt.includes(msg.body.toLowerCase())) {
        if (msg.body.toLowerCase() === 'sim') {
            await client.sendMessage(msg.from, 'Agradecemos seu feedback positivo! Estamos aqui para ajudar sempre que precisar.');
        } else {
            await client.sendMessage(msg.from, 'Agradecemos por seu feedback! Vamos trabalhar para melhorar nossos servi√ßos.');
        }
    }
});
