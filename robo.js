const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const winston = require('winston');
const express = require('express');
const qrcodeLib = require('qrcode');
const fs = require('fs');
const app = express();
const PORT = process.env.PORT || 3000;

// Configura√ß√£o do logger
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.json(),
    transports: [
        new winston.transports.File({ filename: 'error.log', level: 'error' }),
        new winston.transports.File({ filename: 'combined.log' }),
    ],
});

// Diret√≥rio de uploads
const uploadDir = './uploads';
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir);
}

// Servidor para evitar timeout
app.get('/', (req, res) => res.send('Bot is running'));
app.listen(PORT, () => console.log(`Server is running on port ${PORT}`));

// Cliente do WhatsApp
const client = new Client({
    authStrategy: new LocalAuth({ clientId: "bot-whatsapp", dataPath: process.env.SESSION_PATH }),
    puppeteer: {
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
    }
});

// N√∫mero bloqueado
const numeroBloqueado = '+5582981452814@c.us';

// Fun√ß√£o para verificar se o n√∫mero √© bloqueado
const isBlockedNumber = (number) => number === numeroBloqueado;

// Fun√ß√£o para verificar hor√°rio de funcionamento
const isWithinBusinessHours = () => {
    const now = new Date();
    const day = now.getDay();
    const hour = now.getHours();
    return day >= 1 && day <= 6 && hour >= 8 && hour < 18;
};

// Gera√ß√£o de c√≥digo de pedido
const generateOrderCode = () => `BH-${Date.now()}`;

// Servi√ßo de leitura do QR code
client.on('qr', async qr => {
    qrcode.generate(qr, { small: true });
    logger.info('QR code gerado.');
    try {
        await qrcodeLib.toFile('./qrcode.png', qr);
        console.log("QR Code saved as qrcode.png");
    } catch (err) {
        console.error(err);
    }
});

// Evento de conex√£o
client.on('ready', () => {
    console.log('‚úÖ Tudo certo! WhatsApp conectado.');
    logger.info('WhatsApp conectado com sucesso.');
});

// Inicializa o cliente
client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

// Atendimento
client.on('message', async msg => {
    if (isBlockedNumber(msg.from)) return; // Ignora mensagens do n√∫mero bloqueado

    try {
        // Ignora mensagens de grupos
        if (msg.from.endsWith('@g.us')) {
            logger.info(`Mensagem ignorada de grupo: ${msg.from}`);
            return;
        }

        // Verifica hor√°rio de funcionamento
        if (!isWithinBusinessHours()) {
            await client.sendMessage(msg.from, '‚è∞ Ol√°! No momento, estamos fora do hor√°rio de funcionamento. A *Papelaria BH* atende de *segunda a s√°bado*, das *8h √†s 18h*. Por favor, entre em contato novamente dentro desse hor√°rio. Obrigado!');
            logger.info(`Mensagem fora do hor√°rio de funcionamento de ${msg.from}`);
            return;
        }

        const chat = await msg.getChat();
        const contact = await msg.getContact();
        const name = contact.pushname ? contact.pushname.split(" ")[0] : 'Cliente';

        // Mensagem de boas-vindas e op√ß√µes de servi√ßos
        if (msg.body.match(/(menu|oi|ol√°|bom dia|boa tarde|boa noite|servi√ßos|materiais)/i) && msg.from.endsWith('@c.us')) {
            await chat.sendStateTyping();
            await delay(2000); // Simula um atraso para que o cliente n√£o perceba uma resposta instant√¢nea
            await client.sendMessage(msg.from, `Ol√°, *${name}*! Bem-vindo √† *Papelaria BH* Ô∏è. Como posso ajudar? Aqui est√£o algumas op√ß√µes de servi√ßos:\n\n *1 - Impress√£o* (R$ 2,00 por p√°gina)\n *2 - Xerox* (R$ 0,50 por documento)\nÔ∏è *3 - Revela√ß√£o de Foto* (R$ 5,00)\n *4 - Foto 3x4* (R$ 5,00 por 6 unidades)\n *5 - Plastifica√ß√£o A4* (R$ 7,00)\n *6 - Plastifica√ß√£o SUS* (R$ 5,00)\n *7 - Impress√£o em papel cart√£o* (R$ 3,00)\n *8 - Papel fotogr√°fico adesivo* (R$ 5,00)\n *9 - Encaderna√ß√£o 50 folhas* (R$ 12,00)\n *10 - Ver mais op√ß√µes de materiais e variedades*\n\nDiga o n√∫mero da op√ß√£o que deseja, ou envie seu arquivo para impress√£o.\n\nüí≥ *Para pagamentos, nosso Pix √©: 82987616759*.`);
        } else if (['1', '2', '3', '4'].includes(msg.body)) {
            let responseMessage;
            switch (msg.body) {
                case '1':
                    responseMessage = 'Ô∏è O valor da impress√£o √© *R$ 2,00 por p√°gina*. Envie o arquivo para que possamos imprimir. O prazo para a impress√£o √© de *5 a 10 minutos*. Quando estiver pronto, voc√™ poder√° buscar aqui na *Papelaria BH*.';
                    break;
                case '2':
                    responseMessage = 'O valor da xerox √© *R$ 0,50 por documento*. O prazo para a xerox √© de *5 a 10 minutos*. Envie os documentos que deseja copiar e busque na *Papelaria BH*.';
                    break;
                case '3':
                    responseMessage = 'Ô∏è O valor para revela√ß√£o de foto √© *R$ 5,00*. O prazo para a revela√ß√£o √© de *5 a 10 minutos*. Envie a foto que deseja revelar e venha buscar na *Papelaria BH*.';
                    break;
                case '4':
                    responseMessage = 'O valor para foto 3x4 √© *R$ 5,00 para 6 unidades*. O prazo para a foto √© de *5 a 10 minutos*. Envie sua foto para impress√£o ou venha tirar aqui na *Papelaria BH*.';
                    break;
            }

            await client.sendMessage(msg.from, responseMessage);
            await chat.sendStateTyping(); // Informa que o bot est√° "digitando"
            await delay(3000); // Simula o tempo de processamento

            // Aguardando envio de arquivo
            logger.info(`Aguardando arquivo de ${msg.from}`);
        } else if (msg.hasMedia) {
            const media = await msg.downloadMedia();
            // Aqui voc√™ pode salvar o arquivo recebido, se necess√°rio
            console.log('Arquivo recebido:', media);
            await client.sendMessage(msg.from, 'üìÑ Arquivo recebido com sucesso! Estamos processando seu pedido.');

            // Simula o tempo para processamento
            await delay(600000); // 10 minutos de espera
            await client.sendMessage(msg.from, `*${name}*, seu pedido est√° pronto! Pode retirar na *Papelaria BH*.`);

            // Feedback do cliente
            await client.sendMessage(msg.from, 'Obrigado por utilizar nossos servi√ßos! Gostar√≠amos de saber se o atendimento foi satisfat√≥rio. Por favor, responda com "sim" ou "n√£o".');
        } else if (msg.body.toLowerCase() === 'sim' || msg.body.toLowerCase() === 'n√£o') {
            const feedback = msg.body.toLowerCase() === 'sim' ? 'positivo' : 'negativo';
            await client.sendMessage(msg.from, `Agradecemos seu feedback ${feedback}! Estamos aqui para ajudar sempre que precisar.`);
        }
    } catch (error) {
        logger.error('Erro ao processar a mensagem: ', error);
    }
});
